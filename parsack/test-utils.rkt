#lang racket
(require "parser.rkt")
(require rackunit)
(provide (all-defined-out))

(define-syntax-rule (force-Consumed e)
  (let ([res e])
    (struct-copy Consumed res [Reply (force (Consumed-Reply res))])))
(define-syntax-rule (check-parsing e parsed rst)
  (check-equal? (force-Consumed e)
                (Consumed (Ok (string->list parsed) rst))))
(define-syntax-rule (check-parsings e parsed ... rst)
  (check-equal? (force-Consumed e)
                (Consumed (Ok (list (string->list parsed) ...) rst))))
(define-syntax-rule (check-line-parsings e (x ...) ... rst)
  (check-equal? (force-Consumed e) (Consumed (Ok (list (list (string->list x) ...) ...) rst))))
(define-syntax-rule (check-empty-parsing e rst)
  (check-equal? e (Empty (Ok '() rst))))
(define-syntax-rule (check-parse-error e)
  (check-equal? e (Empty Error)))
(define-syntax-rule (check-partial-parse-error e)
  (check-equal? (force-Consumed e) (Consumed Error)))
